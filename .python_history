help()
"modules"
dir(cgi)
import cgi
import cgiqq
q
import cgi
help(cgi)
cgi.parse_qs()
import docstring
dir
import
import docstring
import docstrin
import docstring
dir(docstring) 
docstring.__doc__()
docstring.__doc__
help(docstring) 
docstring.__doc__
vim docstring.py
import docstring
docstring.__doc__
import docstring
docstring.__doc__
import sys
dir(sys)
import docstring.py
import docstring.
import docstring
docstring.
dir(docstring)
docstring.__doc__
docstring.__doc__()
dir
docstring.__doc__()
dir("built-in function")
help(docstring) 
docstring.__doc__()
docstring.__doc__
docstring.__doc__q
import docstring
dir(docstring)
docstring.__doc__
help()docstring_01
help(docstring_01)
import docstring_01
help(docstring_01)
dir(docstring_01)
docstring_01.__doc__
docstring_01.__doc__()
docstring_01.__doc__
docstring_01
./docstring_01
ex
exec(./docstring_01)
exec(docstring_01)
exec(docstring_01.py)
ex
exec(docstring_01)
exec("docstring_01")
exec("docstring_01.py")
exec("docstring_01")
import docstring_01
exec("docstring_01")
import docstring_01
exec("docstring_01").read()
exec("docstring_01").read
docstring_01.
docstring_01.trim()
docstring_01.trim("ewrwe")
docstring_01.sys
docstring_01.sys()
docstring_01.__doc__
trim.
import docstring_01
trim (';lk;lk;l)
trim (';lk;lk;l')
import docstring_01
trim(';lk;lk;l')
dir
import docstring_02
import docstring_01
docstring_01.trim(';lk;lk;l')
docstring_01.trim(';lk;lk;l').__doc__
print(docstring_01.trim(';lk;lk;l').__doc__)
import docstring_01
docstring_01.trim(';lk;lk;l')
docstring_01.trim(';lk;lk;l jkhkj kjhkjh kjhkj')
help(docstring_01.trim(';lk;lk;l jkhkj kjhkjh kjhkj'))
help("docstring_01.trim(';lk;lk;l jkhkj kjhkjh kjhkj')")
help("docstring_01.trim()")
help("trim()")
help(trim())
help(docstring_01.trim())
help(docstring_01.trim(';l))
help(docstring_01.trim("';l"))
help(docstring_01)
doc(docstring_01)
help(docstring_01)
print(docstring_01.__doc__)
help(docstring_01)
print(docstring_01.trim.__doc__)
print(docstring_01.trim().__doc__)
help(trim)
help(trim())
help(docstring)
import docstring
help(docstring)
import json
\
import json
dir(json)
dict_t = {"name": "John", "age": 30}
dir(dict_t)
keys(dict_t)
dict_t.keys()
dict_t.values()
sorted(dict_t)	
dict_t
a = sorted(dict_t)	
a
q
exit
python3.4 file.py 
exit
d
di = {'importance': 3, 'name': 'Фактор1', 'probability': 0.5}
di
di.keys()
di.values("mame")
di.values("name")
di.values(["name"])
di.keys("name")
di.fromkeys("name")
di
di.fromkeys()
di.items()
di.items([1])
di.items(1)
di.values()
di.values[1]()
di.values[1]
di.values(1)
di.fromkeys()
di.fromkeys(1)
di.fromkeys("name")
di.fromkeys("n")
dir(di)
di.get()
di.get("name")
exit
di.get("name")
requests.post('https://httpbin.org/post', data={'key':'value'})
import requests
requests.post('https://httpbin.org/post', data={'key':'value'})
import requests
exit
import requests
requests.post('https://httpbin.org/post', data={'key':'value'})
r = requests.post('https://httpbin.org/post', data={'key':'value'})
r.data
r.headers
r.cookies
r = requests.post('https://httpbin.org/post', cokies={'key':'value'})
r = requests.post('https://httpbin.org/post', cookies={'key':'value'})
r.cookies
response = requests.head('https://httpbin.org/get')
response.headers['Content-Type']
'application/json
response.headers['Content-Type']
import http.cookiejar, urllib.request
cj = http.cookiejar.CookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
r.url
import urllib.request
from http.cookiejar import CookieJar, DefaultCookiePolicy
policy = DefaultCookiePolicy(
    rfc2965=True, strict_ns_domain=Policy.DomainStrict,
    blocked_domains=["ads.net", ".ads.net"])
cj = CookieJar(policy)
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
import urllib.request
from http.cookiejar import CookieJar, DefaultCookiePolicy
policy = DefaultCookiePolicy(rfc2965=True, strict_ns_domain=Policy.DomainStrict, blocked_domains=["ads.net", ".ads.net"])
cj = CookieJar(policy)
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
r = opener.open("http://example.com/")
from urllib import request, parse
data = parse.urlencode({'visit-month': 'February'}).encode()
req =  request.Request('http://g06u33.nn2000.info', data=data) # this will make the method "POST"
resp = request.urlopen(req)
req.host
req.data
req =  request.Request('http://g06u33.nn2000.info', cookies=data)
req =  request.Request('http://g06u33.nn2000.info', data=data)
req.data
req.full_url
req.get_full_url()
req.get_method()
req.has_header()
req.header_items()
req.host
req.type
req._data
req.__str__()
req.__dir__()
req.__dict__()
req.data
req._data
req._parse()
req._parse("=")
req._parse()
req._data
req.add_header()
req.add_header('key':'val')
req.add_header('key'='val')
req.add_header('key')
req.add_header({'key':'val'})
req.get_header()
req.headers
req.add_header('Content-Type', 'application/json')
req.headers
req.add_header('Content-Type', 'application/json')
.full_url
import urllib
dir(urllib)
urllib.__builtins__
{'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
from urllib import request, parse
request.os
request.sys
request.time
d =  {'000_file_name': 'g06u28.txt', '010_mode': 'w', 'age': '0', 'experience': ['10', '20', '30'], 'function': 'page', 'languages': 'Владею свободно', 'last_name': 'Петров', 'page_id': '3', 'password': '123', 'place': 'Nizhny', 'submit': 'Отправить', 'textarea': 'Для заметок', 'REMOTE_ADDR': '95.79.127.228', 'date': '2022-02-12'} 
d
d.d.keys()
d.d.keys
d.keys()
sort
d.keys().sort()
d.keys().sort
form_keys_list = d.keys()
form_keys_list.sort()
form_keys_list.sort
form_keys_list
form_keys_list[1]
form_keys_list[0]
form_keys_list
form_keys_list.sort()
form_keys_list
d
d.keys()
d.dict_keys()
d.keys()
for x in d.keys():for x in d.keys():
    print (x)
form_keys_list = d.keys()
form_keys_list in "age"
"age"  in form_keys_list
"age1"  in form_keys_list
"age1"  in form_keys_list"age"  in form_keys_list
d.values("age")
d.values()
d.fromkeys('age')
d.get('age')
import json
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}
y = json.dump(x)
y = json.dumps(x)
y
z = json.loads(y)
z
history
l = {'000_file_name': 'g06u28.txt', '010_mode': 'w', 'age': '4', 'experience': ['10', '20', '30'], 'function': 'page', 'languages': 'Владею свободно', 'last_name': 'Петров', 'page_id': '3', 'password': '123', 'place': 'Nizhny', 'submit': 'Отправить', 'textarea': 'Для заметок', 'REMOTE_ADDR': '95.79.127.228', 'date': '2022-02-12'}
l.get('age')
list_age = (list)
list_age.append(1)
list_age.insert(1)
list_age.insert("1")
list_age
list_age.append(q)
list_age.append("q")
list_age.extend("1")
list_age.insert("1")
list_age.append("q")

list_age.append([1])
list_age.append(11)
help
help()
help "keywords"
help keywords
"keywords"
"topics"
LISTS
